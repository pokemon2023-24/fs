
Q1.
const express = require('express');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;

// Body parser middleware
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Employee registration form validation endpoint
// Employee registration form validation endpoint
app.all('/register', (req, res) => {
    if (req.method === 'GET') {
        // Handle GET request, serve the registration form
        res.send('<form method="post" action="/register">' +
                 'Name: <input type="text" name="name"><br>' +
                 'Email: <input type="email" name="email"><br>' +
                 'Age: <input type="number" name="age"><br>' +
                 'Department: <input type="text" name="department"><br>' +
                 '<input type="submit" value="Submit">' +
                 '</form>');
    } else if (req.method === 'POST') {
        // Handle POST request for form submission
        const { name, email, age, department } = req.body;

        // Perform validation...
        // (same validation logic as before)

        // If there are errors, return them
        if (errors.length > 0) {
            return res.status(400).json({ errors });
        }

        // If validation passes, return success message
        res.json({ message: 'Employee registration successful' });
    } else {
        // Method not allowed for other request methods
        res.status(405).send('Method Not Allowed');
    }
});


// Helper function to validate email address
function isValidEmail(email) {
    // This is a simple regex for demonstration purposes, you can use a more sophisticated one if needed
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// Start the server
app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
Slip22q1.txt
Displaying Slip22q1.txt.




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.2) Create a js file named main.js for event-driven application. There should be a main loop that
listens for events, and then triggers a callback function when one of those events is detected.


// main.js

// Define a simple event emitter
const EventEmitter = require('events');
const eventEmitter = new EventEmitter();

// Register event listeners
eventEmitter.on('event', () => {
  console.log('Event occurred!');
});

// Start the main loop
function mainLoop() {
  // Simulate some asynchronous task or event
  setTimeout(() => {
    // Emit the event
    eventEmitter.emit('event');

    // Continue the main loop
    mainLoop();
  }, 1000); // Run every 1 second
}

// Start the main loop
mainLoop();
