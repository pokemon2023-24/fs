//Q.1) Using node js create an eLearning System.

const express = require('express');
const bodyParser = require('body-parser');
const session = require('express-session');

const app = express();
const port = 7000;

// Sample data for users and courses (to be replaced with a database)
let users = [];
let courses = [];

// Middleware to parse JSON bodies
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Session middleware
app.use(session({
    secret: 'secret-key',
    resave: false,
    saveUninitialized: true
}));

// Route to display the homepage
app.get('/', (req, res) => {
    // Check if user is logged in
    if (req.session.loggedIn) {
        res.send(`
            <h1>Welcome ${req.session.username}!</h1>
            <a href="/courses">View Courses</a><br>
            <a href="/logout">Logout</a>
        `);
    } else {
        res.send(`
            <h1>Welcome to the eLearning System</h1>
            <a href="/login">Login</a><br>
            <a href="/register">Register</a>
        `);
    }
});

// Route to display the login form
app.get('/login', (req, res) => {
    res.send(`
        <h2>Login</h2>
        <form action="/login" method="post">
            <label for="username">Username:</label>
            <input type="text" name="username" id="username" required><br><br>
            <label for="password">Password:</label>
            <input type="password" name="password" id="password" required><br><br>
            <button type="submit">Login</button>
        </form>
    `);
});

// Route to handle login
app.post('/login', (req, res) => {
    const { username, password } = req.body;
    // Check if username and password match (to be replaced with database query)
    if (username === "abc" && password === "abc"||username === "abcd" && password === "abcd") {
        req.session.loggedIn = true;
        req.session.username = username;
        res.redirect('/');
    } else {
        res.send('Incorrect username or password');
    }
});

// Route to display the registration form
app.get('/register', (req, res) => {
    res.send(`
        <h2>Register</h2>
        <form action="/register" method="post">
            <label for="username">Username:</label>
            <input type="text" name="username" id="username" required><br><br>
            <label for="password">Password:</label>
            <input type="password" name="password" id="password" required><br><br>
            <button type="submit">Register</button>
        </form>
    `);
});

// Route to handle registration
app.post('/register', (req, res) => {
    const { username, password } = req.body;
    // Add user to users array (to be replaced with database insertion)
    users.push({ username, password });
    res.send('User registered successfully');
});

// Route to display available courses
app.get('/courses', (req, res) => {
    // Display list of courses (to be replaced with database query)
    res.send(<h2>Available Courses:</h2>${courses.map(course => `<li>${course}</li>).join('')}`);
});

// Route to enroll in a course
app.post('/enroll', (req, res) => {
    const { course } = req.body;
    // Add course enrollment logic here (e.g., add course to user's enrolled courses)
    res.send(Enrolled in ${course} successfully);
});

// Route to handle logout
app.get('/logout', (req, res) => {
    req.session.destroy();
    res.redirect('/');
});

app.listen(port, () => {
    console.log(Server is running on port ${port});
});





------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.2) Using angular js create a SPA to carry out validation for a username entered in a textbox. If the
textbox is blank, alert “Enter username”. If the number of characters is less than three, alert ‟
Username is too short”. If value entered is appropriate the print “Valid username” and
password should be minimum 8 characters


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>AngularJS Username and Password Validation</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
</head>
<body ng-app="myApp" ng-controller="myCtrl">

    <label for="username">Username:</label>
    <input type="text" name="username" ng-model="username" ng-blur="validateUsername()" required>
    <br>
    <span style="color:red" ng-show="usernameError">{{ usernameError }}</span>
    <br>
    
    <label for="password">Password:</label>
    <input type="password" name="password" ng-model="password" ng-blur="validatePassword()" required>
    <br>
    <span style="color:red" ng-show="passwordError">{{ passwordError }}</span>
    <br>

    <button ng-click="submitForm()">Submit</button>

    <script>
        angular.module('myApp', [])
            .controller('myCtrl', function($scope) {
                $scope.validateUsername = function() {
                    if (!$scope.username) {
                        $scope.usernameError = 'Enter username';
                    } else if ($scope.username.length < 3) {
                        $scope.usernameError = 'Username is too short';
                    } else {
                        $scope.usernameError = '';
                    }
                };

                $scope.validatePassword = function() {
                    if (!$scope.password) {
                        $scope.passwordError = 'Enter password';
                    } else if ($scope.password.length < 8) {
                        $scope.passwordError = 'Password is too short';
                    } else {
                        $scope.passwordError = '';
                    }
                };

                $scope.submitForm = function() {
                    $scope.validateUsername();
                    $scope.validatePassword();

                    if (!$scope.usernameError && !$scope.passwordError) {
                        alert('Valid username and password!');
                        // Here you can perform further actions like submitting the form data
                    }
                };
            });
    </script>

</body>
</html>
